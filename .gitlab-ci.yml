# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables: 
  APP_NAME: "webapp"
  APP_CONTAINER_PORT: "80"
  APP_EXPOSED_PORT: "5000"
  HEROKU_APP_STG: "demowebapp-staging"
  HEROKU_APP_PROD: "demowebapp-prod"
  HEROKU_DOMAIN: "heroku.com"


image: docker:latest
services: 
  - name: docker:dind
    alias: docker


stages:          # List of stages for jobs, and their order of execution
  - build
  - Test acceptation
  - Release image
  - Deploy review
  - Stop review 
  - Deploy staging 
  - Test staging 
  - Deploy prod
  - Test prod

build-job:       # This job runs in the build stage, which runs first.
  stage: build 
  script:
    - docker build -t ${APP_NAME} .
    - docker save ${APP_NAME} > ${APP_NAME}.tar
  artifacts: 
    paths: 
      - ${APP_NAME}.tar

test-acceptance-job:   # This job runs in the test stage.
  stage: Test acceptation    # 
  script:
    - docker load < ${APP_NAME}.tar
    - docker run -d -p ${APP_EXPOSED_PORT}:${APP_CONTAINER_PORT} --env PORT=${APP_CONTAINER_PORT} --name webapp ${APP_NAME}
    - sleep 5 
    - apk --no-cache add curl 
    - curl "http://docker:${APP_EXPOSED_PORT}" | grep -q "Dimension"

release-image-job:   # This job runs in the test stage.
  stage: Release image    # 
  script:
    - docker load < ${APP_NAME}.tar
    - docker tag ${APP_NAME} "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker tag ${APP_NAME} "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"

deploy-review-job:   # This job runs in the test stage.
  stage: Deploy review    # 
  environment:
    name: staging
    url: htttps://${HEROKU_APP_STG}.${HEROKU_DOMAIN}
  only: 
    - master 
  script:
    - apk --no-cache add npm 
    - npm install -g heroku 
    - heroku container:login 
    - heroku create demowebapp-staging || echo "project already exist"
    - heroku container:push -a demowebapp-staging web 
    - heroku container:release -a demowebapp-staging web 


.stop-review-job:   # This job runs in ordre to delete the review  when we click in the stop button 
  stage: Stop review    #
  script:
    -

.unit-test-job:   # This job runs in the test stage.
  stage: Deploy staging    # 
  script:
    -

.unit-test-job:   # This job runs in the test stage.
  stage: Test staging     # 
  script:
    -

.lint-test-job:   # This job also runs in the test stage.
  stage: Deploy prod    # 
  script:
    - 

.deploy-job:      # This job runs in the deploy stage.
  stage: Test prod  # 
  environment: production
  script:
    - 
